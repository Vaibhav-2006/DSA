Since multidimensional arrays are also arrays they are stored in contiguous memory locations.

They are stored in row major form in c++.
multidimensional arrays can be made like int arr[3][2]={10,20,30,40,50,60} but this is highly
discouraged. Instead we should use:
int arr[3][2]={ {10,20},
                {30,40},
                {50,60} }; to make the code more readable.

Only the first dimension can be omitted when we initialize:
int arr[][2]= { {1,2}, {3,4} }; not specifying the column dimension will result in an error.

For 3-D matrices we can skip the first dimension but we have to provide the other two.

Ways to create multidimensional arrays in C++

1) Since C++14 variable sized multidimensional arrays are allowed in C++.
int m=3, n=2;
int arr[m][n]; 

2)Double pointer
int **arr;
arr= new int*[m];//m=3 and arr[0], arr[1] , arr[2] are pointers to dynamically created arrays.
for(int i=0;i<m;i++)
arr[i]= new int[n];//n=2
//creates a multidimensional arrays of order 3x2

The good thing about this method is that we can have rows of variable sizes. Such arrays
are somtimes called jagged arrays.
Another advantage is that these arrays are easier to pass to functions with their dimensions
as arguments. void foo(int **arr, int m, int n);
The disadvantage is that these arrays are not cache friendly as the pointer is not near
the array in memory and address of arr[0] and arr[0][0] is not same so when arr[0] is loaded
in cache we do not get arr[0][0] in cache as well. Also arrays pointed to by pointers arr[0]
and arr[1] will not be contiguous in memory. So when we load array pointed to by arr[0]
we do not get array pointed to by arr[1] in cache by default. So we get a cache
disadvantage in this method.

3) Another method is used to create multidimensional arrays.
Array of pointers method:
int *arr[m];
for(int i=0;i<m;i++)
arr[i]= new int[n];//n=2
This is very similar to previous method with the difference that array of pointers is created
in stack in this method

4)Array of vectors
vector<int> arr[m]; //Here arr[0], arr[1] are all vectors.
for(int i=0;i<m;i++)
for(int j=0;j<n;j++)
arr[i].push_back(10);

This method is also not as cache friendly as simple 2-D arrays where all elements are stored 
in contiguous memory locations. In this case m vectors are stored in arr and all these 
m vectors allocate their own dynamic memory which are at different locations.
Big advantage is that while previous methods allowed different sized rows, vectors in this 
method allow dynamic rows( rows can be of different sizes and we can always add more elements 
in a row using push_back).
Also array of vectors is easy to pass to functions.

5)Vector of vectors
This method allows dynamic number of rows. Since it consists of different vectors
the above advantages and disadvantages apply here.

vector< vector<int> > arr;
for(int i=0;i<m;i++)
{
vector<int> v; //creating a row which will be pushed
for(int j=0;j<n;j++)
	v.push_back(10);
arr.push_back(v);
}


Passing matrices to functions

1) void print( int mat[3][2])
{
for(int i=0;i<3;i++)
for(int j=0;j<2;j++)
cout<<mat[i][j]<<" ";
}
The problem is that this function will only print a matrix of order 3x2. It is not much useful.

2)
void print( int mat[][2], int m)
{
for(int i=0;i<m;i++)
for(int j=0;j<2;j++)
cout<<mat[i][j]<<" ";
}//Using the fact that C++ allows us to omit the number of rows while initializing an array.
Now this function can print any matrix of order m x 2.

Unfortunately there is no direct syntax for passing a multidimensional array of order m x n
to function with its row and column as arguments so that the function works for any 
multidimensional array.

3)C-style solution using double pointer
void print(int **arr, int m, int n)
{
for(int i=0;i<m;i++)
for(int j=0;j<n;j++)
cout<<arr[i][j]<<" ";
}
You have to remember that for this to work you cannot pass a simple 2-D array from main,
you have to pass a matrix that was created using double pointer.

4) C-style solution Using array of pointers
void print( int *arr[], int m, int n)
{
//print same as above
}
Remember that in main you have to create a 2-D array using this method only.

5)C++ style using array of vectors
void print( vector<int> arr[], int m)
{//You need not pass the number of columns as each vector can have different number of elements.
for(int i=0;i<m;i++)
for(int j=0;j<arr[i].size();j++)
cout<<arr[i][j]<<" ";
}

6)C++ style using vector of vectors
void print( vector<vector<int>> &arr)//we are using reference here to prevent copying. This optimizes the code.
{//You need not pass the number of columns as each vector can have different number of elements.
for(int i=0;i<arr.size();i++)
for(int j=0;j<arr[i].size();j++)
cout<<arr[i][j]<<" ";
}